Testing strategies for async methods:
    1) Simply to simulate delays, or async behavior, use a delay:
        await Task.Delay(nSec);
    2) To call an asynchronous method that immediately returns a result (e.g. for unit test)
        await Task.FromResult(13); //immediately returns integer result 13, but could be any object
    3) Testing exception behavior/paths within code:
        Create tasks that immediately throw exceptions.

Weirdness:
    Waiting on multiple tasks, the first completed task must be awaited in addition to the WaitAny() task:

    ...
        Task<byte[]> downloadTaskA = httpClient.GetByteArrayAsync(urlA);
        Task<byte[]> downloadTaskB = httpClient.GetByteArrayAsync(urlB);  // Wait for either of the tasks to complete.    
        Task<byte[]> completedTask = await Task.WhenAny(downloadTaskA, downloadTaskB); // Return the length of the data retrieved from that URL.
        byte[] data = await completedTask;
        
        return data.Length; 
    }

    -If the other tasks are not awaited or cancelled, they are 'abandoned': they will run to completion but their results will be ignored.
    -Any exception in @completeTask is not propagated when returned from WhenAny, so you should also await @completedTask as above.
    This is important!! It would be very easy to do this instead:
            var completedTask = await Task.WhenAny(task1, task2...)
            var result = completedTask.Result; // Does not propagate exceptions from @completedTask!!


	Dangerous lost exception pattern using multiple awaits:
		var firstTask = createFirstTask(); // firstTask begins running...
		var secondTask = createSecondTask(); // secondTask begins...

		try{
			var result1 = await firstTask;
			var result2 = await secondTask;
		}
		catch()
		{...}
	This is dangerous because before the try, firstTask and secondTask are both running/initiated. If an exception is thrown from firstTask,
	it is caught and handled; however, secondTask is still running and could throw later in an unprotected context.
	This is from Davies' Async book, and I'd like to test it to prove, but it does explain the use of WaitAll() in the library,
	since it aggregates the exceptions from all awaited tasks.


	Dont hold locks across an await:
		lock(sync){
			var result = await someTask();
			//handle result
		}
	This is extremely dangerous because the thread the method begins on with the lock may be different than the one it resumes
	on after an await. Instead, break up the lock like:
	lock(sync){
		//access some concurrent data
	}
	var result = await someTask();
	lock(sync){
		//handle result
		concurrentStuff.Add(result);
	}

	Davies: "If you’re unlucky, you may need to hold some kind of lock over the execution of anasynchronous operation.
	When this happens, you need to think hard, because in gen-eral it’s very difficult to lock resources across an asynchronous call without invitingserious contention issues and deadlocks.
	It may be best to redesign your program."



	'async' is not part of function signatures, so not a part of any interface or inherited/overridden member. Neither interfaces nor abstract/parent
	classes need to specify async, nor can they require async as part of their interface.


    Best practice is to call ConfigureAwait(false) on an waited task.
        await Task.Delay(TimeSpan.FromSeconds(1)).ConfigureAwait(false);
    This frees up the context in which 'await' was initially called, and can be important if that is the UI context to prevent many
    continuations running on the UI context.


    Exception handling: using await properly and correctly, exceptions will be propagated to the calling context of an await'ed function.
    *Dont use 'async void', use 'async Task' instead. Returning Task's is always more testable as well.

    Unit testing: microsoft test frameworks often include a TestMethod timeout setting, provided via some config file. Just goolge 'er.


Interesting:

	An async delegate:
		Func<Task<int>> getNumberAsync = asyncdelegate { return 3; };

	An async lambda:
		Func<Task<string>> fooLambda = async () => "foo";



Data structures:
    -Use builtin concurrent data structures wherever possible for efficiency: ConcurrentDictionary, etc.
    These often generate immutable copies of collections, such as on iteration of the collection.
    Key properties of immutable collections:
        *An instance of an immutable collection never changes.
        *Since it never changes, it is naturally threadsafe.
        *When you call a modifying method on an immutable collection, the modified col‐lection is returned


(CancellationToken a better api for implementing timeouts)

Unclear:
	When to choose Task library based TAP over straightforward await'able code.
	When to use this: Task.Run(() => LongComputation);
	Or this: var task = await LongComputationAsync();











